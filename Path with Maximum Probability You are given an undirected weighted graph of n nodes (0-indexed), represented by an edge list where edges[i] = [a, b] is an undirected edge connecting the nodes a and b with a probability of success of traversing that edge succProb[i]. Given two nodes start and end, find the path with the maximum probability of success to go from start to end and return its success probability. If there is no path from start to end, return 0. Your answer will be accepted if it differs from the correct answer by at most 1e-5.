import heapq
from collections import defaultdict

def maxProbability(n, edges, succProb, start, end):
    graph = defaultdict(list)
    
    for (a, b), prob in zip(edges, succProb):
        graph[a].append((b, prob))
        graph[b].append((a, prob))

    max_prob = [0] * n
    max_prob[start] = 1.0
    max_heap = [(-1.0, start)]  # Use negative because heapq is a min-heap by default
    
    while max_heap:
        current_prob, u = heapq.heappop(max_heap)
        current_prob = -current_prob
        
        if u == end:
            return current_prob
        
        for v, prob in graph[u]:
            new_prob = current_prob * prob
            if new_prob > max_prob[v]:
                max_prob[v] = new_prob
                heapq.heappush(max_heap, (-new_prob, v))
    
    return 0.0

# Example usage:
n = 3
edges = [[0, 1], [1, 2], [0, 2]]
succProb = [0.5, 0.5, 0.2]
start = 0
end = 2
print(maxProbability(n, edges, succProb, start, end))  # Output: 0.25

n = 3
edges = [[0, 1], [1, 2]]
succProb = [0.5, 0.5]
start = 0
end = 2
print(maxProbability(n, edges, succProb, start, end))  # Output: 0.25

n = 3
edges = [[0, 1], [1, 2]]
succProb = [0.5, 0.5]
start = 0
end = 1
print(maxProbability(n, edges, succProb, start, end))  # Output: 0.5
