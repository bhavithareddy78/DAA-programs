from itertools import combinations

def generate_subset_sums(arr):
    return sorted(sum(comb) for r in range(len(arr) + 1) for comb in combinations(arr, r))

def find_closest_subset_sum(arr, target):
    mid = len(arr) // 2
    left_sums = generate_subset_sums(arr[:mid])
    right_sums = generate_subset_sums(arr[mid:])
    
    closest_sum = float('inf')
    for left in left_sums:
        low, high = 0, len(right_sums) - 1
        while low <= high:
            mid = (low + high) // 2
            curr_sum = left + right_sums[mid]
            if abs(target - curr_sum) < abs(target - closest_sum):
                closest_sum = curr_sum
            if curr_sum < target:
                low = mid + 1
            else:
                high = mid - 1
    return closest_sum

# Test cases
print("Closest subset sum for [45, 34, 4, 12, 5, 2] with target 42:", find_closest_subset_sum([45, 34, 4, 12, 5, 2], 42))
print("Closest subset sum for [1, 3, 2, 7, 4, 6] with target 10:", find_closest_subset_sum([1, 3, 2, 7, 4, 6], 10))
