import heapq

def dijkstra(edges, n, source, target):
    graph = [[] for _ in range(n)]
    for u, v, w in edges:
        graph[u].append((v, w))

    dist = [float('inf')] * n
    dist[source] = 0

    pq = [(0, source)]  # Priority queue: (distance, vertex)

    while pq:
        d, u = heapq.heappop(pq)
        if d > dist[u]:
            continue  # Skip outdated entries

        for v, w in graph[u]:
            new_dist = dist[u] + w
            if new_dist < dist[v]:
                dist[v] = new_dist
                heapq.heappush(pq, (new_dist, v))

    return dist[target]

# Given input (Test Case 1)
edges1 = [(0, 1, 7), (0, 2, 9), (0, 5, 14), (1, 2, 10), (1, 3, 15),
          (2, 3, 11), (2, 5, 2), (3, 4, 6), (4, 5, 9)]
n1 = 6
source1 = 0
target1 = 4

# Given input (Test Case 2)
edges2 = [(0, 1, 10), (0, 4, 3), (1, 2, 2), (1, 4, 4), (2, 3, 9),
          (3, 2, 7), (4, 1, 1), (4, 2, 8), (4, 3, 2)]
n2 = 5
source2 = 0
target2 = 3

output1 = dijkstra(edges1, n1, source1, target1)
output2 = dijkstra(edges2, n2, source2, target2)

print(f"For Test Case 1, the shortest path from {source1} to {target1} has distance {output1}.")
print(f"For Test Case 2, the shortest path from {source2} to {target2} has distance {output2}.")
