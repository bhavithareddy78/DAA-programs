import heapq
from collections import defaultdict

def networkDelayTime(times, n, k):
    # Create graph as adjacency list
    graph = defaultdict(list)
    for u, v, w in times:
        graph[u].append((v, w))
    
    # Initialize distance dictionary with infinity
    dist = {i: float('inf') for i in range(1, n + 1)}
    dist[k] = 0

    # Min-heap to process nodes based on shortest distance
    min_heap = [(0, k)]  # (distance, node)

    while min_heap:
        current_dist, u = heapq.heappop(min_heap)

        # If the current node's distance is greater than the known shortest distance, skip
        if current_dist > dist[u]:
            continue
        
        # Process all neighbors of the current node
        for v, weight in graph[u]:
            distance = current_dist + weight
            if distance < dist[v]:
                dist[v] = distance
                heapq.heappush(min_heap, (distance, v))

    # Calculate the maximum distance to determine the total time
    max_dist = max(dist.values())
    
