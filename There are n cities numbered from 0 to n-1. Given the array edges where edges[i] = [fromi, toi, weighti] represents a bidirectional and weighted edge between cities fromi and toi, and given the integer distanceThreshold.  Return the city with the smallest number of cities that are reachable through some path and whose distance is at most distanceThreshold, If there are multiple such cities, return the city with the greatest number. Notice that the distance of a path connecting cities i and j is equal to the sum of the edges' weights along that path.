import heapq
from collections import defaultdict, deque

def findTheCity(n, edges, distanceThreshold):
    # Build graph as adjacency list
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))

    def dijkstra(start):
        dist = [float('inf')] * n
        dist[start] = 0
        min_heap = [(0, start)]  # (distance, node)
        while min_heap:
            d, u = heapq.heappop(min_heap)
            if d > dist[u]:
                continue
            for v, weight in graph[u]:
                if dist[u] + weight < dist[v]:
                    dist[v] = dist[u] + weight
                    heapq.heappush(min_heap, (dist[v], v))
        return dist

    min_reachable_count = float('inf')
    best_city = -1

    for city in range(n):
        dist = dijkstra(city)
        reachable_count = sum(1 for d in dist if d <= distanceThreshold)
        
        if reachable_count < min_reachable_count or (reachable_count == min_reachable_count and city > best_city):
            min_reachable_count = reachable_count
            best_city = city

    return best_city

# Example usage:
n = 4
edges = [[0, 1, 3], [1, 2, 1], [2, 3, 4], [0, 2, 2], [0, 3, 5]]
distanceThreshold = 4
print(findTheCity(n, edges, distanceThreshold))  # Output: 3
