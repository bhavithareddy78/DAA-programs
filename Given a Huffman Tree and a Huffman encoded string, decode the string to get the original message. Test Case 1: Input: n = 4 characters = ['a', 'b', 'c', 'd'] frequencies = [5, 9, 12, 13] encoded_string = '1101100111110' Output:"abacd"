class TreeNode:
    def __init__(self, char=None):
        self.char = char
        self.left = None
        self.right = None

def build_huffman_tree(characters, frequencies):
    # Create a list of (frequency, character) tuples
    nodes = [(freq, TreeNode(char)) for char, freq in zip(characters, frequencies)]
    heapq.heapify(nodes)  # Convert to a min heap

    while len(nodes) > 1:
        freq1, left_node = heapq.heappop(nodes)
        freq2, right_node = heapq.heappop(nodes)

        merged_node = TreeNode()
        merged_node.left = left_node
        merged_node.right = right_node
        heapq.heappush(nodes, (freq1 + freq2, merged_node))

    return nodes[0][1]  # Root of the Huffman tree

def huffman_decode(encoded_string, root):
    decoded = []
    current_node = root

    for bit in encoded_string:
        if bit == '0':
            current_node = current_node.left
        else:
            current_node = current_node.right

        if current_node.char:
            decoded.append(current_node.char)
            current_node = root

    return ''.join(decoded)

# Given input
characters = ['a', 'b', 'c', 'd']
frequencies = [5, 9, 12, 13]
encoded_string = '1101100111110'

# Build the Huffman tree
huffman_root = build_huffman_tree(characters, frequencies)

# Decode the string
decoded_message = huffman_decode(encoded_string, huffman_root)

print(f"The decoded message is: {decoded_message}")
