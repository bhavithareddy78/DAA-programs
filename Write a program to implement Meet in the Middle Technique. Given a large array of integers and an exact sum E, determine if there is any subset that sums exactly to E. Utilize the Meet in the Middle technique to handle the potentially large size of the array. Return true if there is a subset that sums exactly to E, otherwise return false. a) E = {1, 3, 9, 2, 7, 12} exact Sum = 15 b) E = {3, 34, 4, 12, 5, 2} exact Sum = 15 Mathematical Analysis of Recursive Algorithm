from itertools import combinations

def generate_subset_sums(arr):
    subset_sums = set()
    for r in range(len(arr) + 1):
        for comb in combinations(arr, r):
            subset_sums.add(sum(comb))
    return subset_sums

def can_sum_to_target(arr, target):
    mid = len(arr) // 2
    left_part = arr[:mid]
    right_part = arr[mid:]
    
    left_sums = generate_subset_sums(left_part)
    right_sums = generate_subset_sums(right_part)
    
    for left_sum in left_sums:
        if (target - left_sum) in right_sums:
            return True
    
    return False

# Test cases
print("Subset with exact sum 15 exists for [1, 3, 9, 2, 7, 12]:", can_sum_to_target([1, 3, 9, 2, 7, 12], 15))
print("Subset with exact sum 15 exists for [3, 34, 4, 12, 5, 2]:", can_sum_to_target([3, 34, 4, 12, 5, 2], 15))
